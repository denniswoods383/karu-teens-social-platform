import { getAPIBaseURL } from '../../utils/ipDetection';
import { useState } from 'react';

const categories = [
  { id: 'realistic', name: 'Realistic', icon: 'üì∏' },
  { id: 'artistic', name: 'Artistic', icon: 'üé®' },
  { id: 'anime', name: 'Anime', icon: 'üå∏' },
  { id: 'cartoon', name: 'Cartoon', icon: 'üé≠' },
  { id: 'fantasy', name: 'Fantasy', icon: 'üßô‚Äç‚ôÇÔ∏è' },
  { id: 'scifi', name: 'Sci-Fi', icon: 'üöÄ' }
];

const artStyles = [
  { id: 'photorealistic', name: 'Photorealistic' },
  { id: 'oil_painting', name: 'Oil Painting' },
  { id: 'watercolor', name: 'Watercolor' },
  { id: 'digital_art', name: 'Digital Art' },
  { id: 'pencil_sketch', name: 'Pencil Sketch' },
  { id: 'pop_art', name: 'Pop Art' },
  { id: 'impressionist', name: 'Impressionist' },
  { id: 'cyberpunk', name: 'Cyberpunk' },
  { id: 'steampunk', name: 'Steampunk' },
  { id: 'minimalist', name: 'Minimalist' }
];

export default function ImageGenerator() {
  const [prompt, setPrompt] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedStyle, setSelectedStyle] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);

  const generateImage = async () => {
    if (!prompt.trim()) return;

    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      
      // Build enhanced prompt with style and category
      let enhancedPrompt = prompt;
      if (selectedStyle) {
        enhancedPrompt += `, ${selectedStyle.replace('_', ' ')} style`;
      }
      if (selectedCategory && selectedCategory !== 'realistic') {
        enhancedPrompt += `, ${selectedCategory} art`;
      }
      
      const response = await fetch(`${getAPIBaseURL()}/api/v1/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ 
          prompt: enhancedPrompt,
          style: selectedStyle || 'photographic'
        })
      });
      
      const data = await response.json();
      if (response.ok && data.success) {
        if (data.image_data) {
          setResult(`<img src="${data.image_data}" alt="Generated by Scarlet Witch" style="max-width: 100%; border-radius: 8px;" />`);
        } else {
          setResult(data.message || 'Image generated successfully!');
        }
      } else {
        const errorMsg = data.detail || data.error || 'Something went wrong';
        setResult(typeof errorMsg === 'string' ? errorMsg : JSON.stringify(errorMsg));
      }
    } catch (error) {
      setResult('Network error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center mb-6">
          <button
            onClick={() => window.history.back()}
            className="text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-gray-200 mr-4"
            title="Go back"
          >
            ‚Üê
          </button>
          <div className="flex-1 text-center">
            <h1 className="text-3xl font-bold flex items-center justify-center gap-3">
              üé® Scarlet Witch
              <span className="text-lg font-normal text-gray-500">(Reality Manipulation)</span>
            </h1>
            <p className="text-gray-600 mt-2">Create images from your imagination using AI</p>
          </div>
        </div>

        <div className="space-y-6">
          {/* Prompt Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Describe what you want to create:
            </label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="A majestic dragon flying over a medieval castle..."
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
            />
          </div>

          {/* Category Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Choose Category:
            </label>
            <div className="grid grid-cols-3 md:grid-cols-6 gap-3">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`p-3 rounded-lg border-2 text-center transition-all ${
                    selectedCategory === category.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-blue-300'
                  }`}
                >
                  <div className="text-2xl mb-1">{category.icon}</div>
                  <div className="text-xs font-medium">{category.name}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Art Style Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Choose Art Style:
            </label>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
              {artStyles.map((style) => (
                <button
                  key={style.id}
                  onClick={() => setSelectedStyle(style.id)}
                  className={`p-2 rounded-lg border text-sm transition-all ${
                    selectedStyle === style.id
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-blue-300'
                  }`}
                >
                  {style.name}
                </button>
              ))}
            </div>
          </div>

          {/* Generate Button */}
          <button
            onClick={generateImage}
            disabled={loading || !prompt.trim()}
            className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                Scarlet Witch is creating...
              </>
            ) : (
              <>üé® Generate Image</>
            )}
          </button>

          {/* Result Display */}
          {result && (
            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Scarlet Witch's Creation:
              </label>
              <div className="bg-gray-50 p-4 rounded-lg border">
                {result.includes('<img') ? (
                  <div dangerouslySetInnerHTML={{ __html: result }} />
                ) : (
                  <pre className="whitespace-pre-wrap text-sm">
                    {typeof result === 'string' ? result : JSON.stringify(result, null, 2)}
                  </pre>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}